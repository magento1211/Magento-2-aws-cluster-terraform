#!/bin/bash
#=================================================================================#
#        MagenX e-commerce stack for Magento 2                                    #
#        Copyright (C) 2013-present admin@magenx.com                              #
#        All rights reserved.                                                     #
#=================================================================================#


REPO_MARIADB="https://downloads.mariadb.com/MariaDB/mariadb_repo_setup"
INSTANCE_LOCAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

## system installation
apt-get -y install software-properties-common
apt-get update
apt-get -y install ${EXTRA_PACKAGES_DEB}

## create user
useradd -d /home/${MAGE_OWNER} -s /bin/bash ${MAGE_OWNER}
## create root php user
useradd -M -s /sbin/nologin -d /home/${MAGE_OWNER} ${MAGE_PHP_USER}
usermod -g ${MAGE_PHP_USER} ${MAGE_OWNER}

pip3 install git-remote-codecommit

if [ ! -f ${MAGE_WEB_ROOT_PATH}/app/etc/env.php ]; then
mkdir -p ${MAGE_WEB_ROOT_PATH}
chmod 711 /home/${MAGE_OWNER}
mkdir -p /home/${MAGE_OWNER}/{.config,.cache,.local,.composer}
chown -R ${MAGE_OWNER}:${MAGE_PHP_USER} ${MAGE_WEB_ROOT_PATH} /home/${MAGE_OWNER}/{.config,.cache,.local,.composer}
chmod 2770 ${MAGE_WEB_ROOT_PATH}
setfacl -Rdm u:${MAGE_OWNER}:rwX,g:${MAGE_PHP_USER}:r-X,o::- ${MAGE_WEB_ROOT_PATH}
cd ${MAGE_WEB_ROOT_PATH}
su ${MAGE_OWNER} -s /bin/bash -c "git clone -b developer codecommit::${AWS_DEFAULT_REGION}://${CODECOMMIT_MAGENTO_REPO_NAME} ."
setfacl -Rdm u:${MAGE_OWNER}:rwX,g:${MAGE_PHP_USER}:rwX,o::- var generated pub/static pub/media
chmod +x bin/magento
fi

## install mysql
curl -sS $${REPO_MARIADB} | bash

## install nginx
echo "deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx" > /etc/apt/sources.list.d/nginx.list
curl -fsSL https://nginx.org/keys/nginx_signing.key | apt-key add -

## install php
add-apt-repository ppa:ondrej/php -y

## install elasticsearch
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" > /etc/apt/sources.list.d/elastic-7.x.list

apt-get update
apt-get install -y mariadb-server varnish elasticsearch kibana redis-server nginx composer php-pear php${PHP_VERSION} %{ for PHP_PKG in split(" ", "${PHP_PACKAGES_DEB}") ~} php${PHP_VERSION}-${PHP_PKG} %{ endfor ~}

systemctl enable mysql

wget -qO /etc/my.cnf https://raw.githubusercontent.com/magenx/magento-mysql/master/my.cnf/my.cnf

IBPS=$(echo "0.5*$(awk '/MemTotal/ { print $2 / (1024*1024)}' /proc/meminfo | cut -d'.' -f1)" | bc | xargs printf "%1.0f")
sed -i "s/innodb_buffer_pool_size = 4G/innodb_buffer_pool_size = $${IBPS}G/" /etc/my.cnf
sed -i "s/innodb_buffer_pool_instances = 4/innodb_buffer_pool_instances = $${IBPS}/" /etc/my.cnf
  
MYSQL_ROOT_PASSWORD_GEN=$(head -c 500 /dev/urandom | tr -dc 'a-zA-Z0-9@%^&?=+_[]{}()<>-' | fold -w 15 | head -n 1)
MYSQL_ROOT_PASSWORD="$${MYSQL_ROOT_PASSWORD_GEN}$${RANDOM}"

systemctl restart mariadb

mysql --connect-expired-password  <<EOMYSQL
ALTER USER 'root'@'localhost' IDENTIFIED BY "$${MYSQL_ROOT_PASSWORD}";
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
exit
EOMYSQL

cat > /root/.my.cnf <<END
[client]
user=root
password="$${MYSQL_ROOT_PASSWORD}"
END

cat > /root/.mytop <<END
user=root
pass=$${MYSQL_ROOT_PASSWORD}
db=mysql
END

chmod 600 /root/.my.cnf /root/.mytop

GREENTXT "GENERATE MYSQL USER AND DATABASE NAMES WITH NEW PASSWORD"
MAGE_DB_PASSWORD_GEN=$(head -c 500 /dev/urandom | tr -dc 'a-zA-Z0-9%^&=+_{}()<>-' | fold -w 15 | head -n 1)
MAGE_DB_PASSWORD="$${MAGE_DB_PASSWORD_GEN}$${RANDOM}"
MAGE_DB_GROUP="$(openssl rand -hex 4)"

MAGE_DB_HOST="localhost" 
MAGE_DB_NAME="m${MAGE_VERSION}d_dev_$${MAGE_DB_GROUP}" 
MAGE_DB_USER="m${MAGE_VERSION}u_dev_$${MAGE_DB_GROUP}"
GREENTXT "CREATE MYSQL STATEMENT AND EXECUTE IT"

mysql <<EOMYSQL
CREATE USER '$${MAGE_DB_USER}'@'$${MAGE_DB_HOST}' IDENTIFIED BY '$${MAGE_DB_PASSWORD}';
CREATE DATABASE $${MAGE_DB_NAME};
GRANT ALL PRIVILEGES ON $${MAGE_DB_NAME}.* TO '$${MAGE_DB_USER}'@'$${MAGE_DB_HOST}' WITH GRANT OPTION;
exit
EOMYSQL

cat > database <<END
MAGE_DB_HOST="$${MAGE_DB_HOST}"
MAGE_DB_NAME="$${MAGE_DB_NAME}"
MAGE_DB_USER="$${MAGE_DB_USER}"
MAGE_DB_PASSWORD="$${MAGE_DB_PASSWORD}"
END

echo "discovery.type: single-node" >> /etc/elasticsearch/elasticsearch.yml
echo "xpack.security.enabled: true" >> /etc/elasticsearch/elasticsearch.yml
sed -i "s/.*cluster.name.*/cluster.name: magento/" /etc/elasticsearch/elasticsearch.yml
sed -i "s/.*node.name.*/node.name: magento-node1/" /etc/elasticsearch/elasticsearch.yml
sed -i "s/.*network.host.*/network.host: 127.0.0.1/" /etc/elasticsearch/elasticsearch.yml
sed -i "s/.*http.port.*/http.port: 9200/" /etc/elasticsearch/elasticsearch.yml
sed -i "s/.*-Xms.*/-Xms512m/" /etc/elasticsearch/jvm.options
sed -i "s/.*-Xmx.*/-Xmx512m/" /etc/elasticsearch/jvm.options

sed -i "s,#JAVA_HOME=,JAVA_HOME=/usr/share/elasticsearch/jdk/," /etc/default/elasticsearch

chown -R :elasticsearch /etc/elasticsearch/*
systemctl daemon-reload
systemctl enable elasticsearch.service
systemctl restart elasticsearch.service

/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto -b > /tmp/elasticsearch

cat > elasticsearch <<END
APM_SYSTEM_PASSWORD="$(awk '/PASSWORD apm_system/ { print $4 }' /tmp/elasticsearch)"
KIBANA_SYSTEM_PASSWORD="$(awk '/PASSWORD kibana_system/ { print $4 }' /tmp/elasticsearch)"
KIBANA_PASSWORD="$(awk '/PASSWORD kibana =/ { print $4 }' /tmp/elasticsearch)"
LOGSTASH_SYSTEM_PASSWORD="$(awk '/PASSWORD logstash_system/ { print $4 }' /tmp/elasticsearch)"
BEATS_SYSTEM_PASSWORD="$(awk '/PASSWORD beats_system/ { print $4 }' /tmp/elasticsearch)"
REMOTE_MONITORING_USER_PASSWORD="$(awk '/PASSWORD remote_monitoring_user/ { print $4 }' /tmp/elasticsearch)"
ELASTIC_PASSWORD="$(awk '/PASSWORD elastic/ { print $4 }' /tmp/elasticsearch)"
END

wget -qO /etc/systemd/system/varnish.service https://raw.githubusercontent.com/magenx/Magento-2-server-installation/master/varnish.service
wget -qO /etc/varnish/varnish.params https://raw.githubusercontent.com/magenx/Magento-2-server-installation/master/varnish.params
uuidgen > /etc/varnish/secret
systemctl daemon-reload

cat > /etc/sysctl.conf <<END
fs.file-max = 1000000
fs.inotify.max_user_watches = 1000000
vm.swappiness = 5
END

sysctl -q -p

cat > ${PHP_OPCACHE_INI} <<END
zend_extension=opcache.so
opcache.enable = 0
opcache.enable_cli = 0
END

cp ${PHP_INI} ${PHP_INI}.BACK
sed -i 's/^\(max_execution_time = \)[0-9]*/\17200/' ${PHP_INI}
sed -i 's/^\(max_input_time = \)[0-9]*/\17200/' ${PHP_INI}
sed -i 's/^\(memory_limit = \)[0-9]*M/\12048M/' ${PHP_INI}
sed -i 's/^\(post_max_size = \)[0-9]*M/\164M/' ${PHP_INI}
sed -i 's/^\(upload_max_filesize = \)[0-9]*M/\164M/' ${PHP_INI}
sed -i 's/expose_php = On/expose_php = Off/' ${PHP_INI}
sed -i 's/;realpath_cache_size =.*/realpath_cache_size = 4096k/' ${PHP_INI}
sed -i 's/;realpath_cache_ttl =.*/realpath_cache_ttl = 86400/' ${PHP_INI}
sed -i 's/short_open_tag = Off/short_open_tag = On/' ${PHP_INI}
sed -i 's/;max_input_vars =.*/max_input_vars = 50000/' ${PHP_INI}
sed -i 's/session.gc_maxlifetime = 1440/session.gc_maxlifetime = 28800/' ${PHP_INI}
sed -i 's/mysql.allow_persistent = On/mysql.allow_persistent = Off/' ${PHP_INI}
sed -i 's/mysqli.allow_persistent = On/mysqli.allow_persistent = Off/' ${PHP_INI}
sed -i 's/pm = dynamic/pm = ondemand/' ${PHP_FPM_POOL}
sed -i 's/;pm.max_requests = 500/pm.max_requests = 10000/' ${PHP_FPM_POOL}
sed -i 's/pm.max_children = 5/pm.max_children = 100/' ${PHP_FPM_POOL}

hostnamectl set-hostname server.${MAGE_DOMAIN} --static

timedatectl set-timezone ${MAGE_TIMEZONE}

sed -i "s/\[www\]/\[${MAGE_OWNER}\]/" ${PHP_FPM_POOL}
sed -i "s/^user =.*/user = ${MAGE_PHP_USER}/" ${PHP_FPM_POOL}
sed -i "s/^group =.*/group = ${MAGE_PHP_USER}/" ${PHP_FPM_POOL}
#sed -i "s/^listen =.*/listen = 127.0.0.1:9000/" ${PHP_FPM_POOL}
sed -ri "s/;?listen.owner =.*/listen.owner = ${MAGE_OWNER}/" ${PHP_FPM_POOL}
sed -ri "s/;?listen.group =.*/listen.group = ${MAGE_PHP_USER}/" ${PHP_FPM_POOL}
sed -ri "s/;?listen.mode = 0660/listen.mode = 0660/" ${PHP_FPM_POOL}
sed -ri "s/;?listen.allowed_clients =.*/listen.allowed_clients = 127.0.0.1/" ${PHP_FPM_POOL}
sed -i '/sendmail_path/,$d' ${PHP_FPM_POOL}
sed -i '/PHPSESSID/d' ${PHP_INI}
sed -i "s,.*date.timezone.*,date.timezone = ${MAGE_TIMEZONE}," ${PHP_INI}

cat >> ${PHP_FPM_POOL} <<END
;;
;; Custom pool settings
php_admin_flag[log_errors] = on
php_admin_value[error_log] = "${MAGE_WEB_ROOT_PATH}/var/log/php-fpm-error.log"
php_admin_value[default_charset] = UTF-8
php_flag[display_errors] = on
php_admin_value[memory_limit] = 2024M
php_admin_value[date.timezone] = ${MAGE_TIMEZONE}
END

wget -qO /etc/nginx/fastcgi_params  ${GITHUB_REPO_RAW_URL}/nginx/fastcgi_params
wget -qO /etc/nginx/nginx.conf  ${GITHUB_REPO_RAW_URL}/nginx/nginx.conf
mkdir -p /etc/nginx/sites-enabled
mkdir -p /etc/nginx/sites-available && cd $_
curl -s ${GITHUB_REPO_API_URL}/nginx/sites-available 2>&1 | awk -F'"' '/download_url/ {print $4 ; system("curl -sO "$4)}' >/dev/null
ln -s /etc/nginx/sites-available/magento${MAGE_VERSION}.conf /etc/nginx/sites-enabled/magento${MAGE_VERSION}.conf
mkdir -p /etc/nginx/conf_m${MAGE_VERSION} && cd /etc/nginx/conf_m${MAGE_VERSION}/
curl -s ${GITHUB_REPO_API_URL}/nginx/conf_m2 2>&1 | awk -F'"' '/download_url/ {print $4 ; system("curl -sO "$4)}' >/dev/null

sed -i "s/user  nginx;/user  ${MAGE_OWNER};/" /etc/nginx/nginx.conf
sed -i "s/INSTANCE_LOCAL_IP/$${INSTANCE_LOCAL_IP}/" /etc/nginx/sites-available/magento${MAGE_VERSION}.conf
sed -i "s/example.com/${MAGE_DOMAIN}/g" /etc/nginx/sites-available/magento${MAGE_VERSION}.conf
sed -i "s/example.com/${MAGE_DOMAIN}/g" /etc/nginx/nginx.conf
sed -i "s,/var/www/html,${MAGE_WEB_ROOT_PATH},g" /etc/nginx/conf_m${MAGE_VERSION}/maps.conf
sed -i "s,access_log.*,access_log  ${MAGE_WEB_ROOT_PATH}/var/log/nginx-access.log  main; #if=$writelog;," /etc/nginx/nginx.conf
sed -i "s,error_log.*,error_log  ${MAGE_WEB_ROOT_PATH}/var/log/nginx-error.log  error;," /etc/nginx/nginx.conf

find /etc/nginx/ -name "default.conf" -exec rm {} \;

systemctl daemon-reload
systemctl restart nginx.service
systemctl restart php${PHP_VERSION}-fpm.service

cd /usr/local/src
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
dpkg -i -E ./amazon-cloudwatch-agent.deb

/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:amazon-cloudwatch-agent-developer.json
