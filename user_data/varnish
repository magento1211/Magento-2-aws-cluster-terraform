#!/bin/bash
#=================================================================================#
#        MagenX e-commerce stack for Magento 2                                    #
#        Copyright (C) 2013-present admin@magenx.com                              #
#        All rights reserved.                                                     #
#=================================================================================#


AWSTOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
INSTANCE_LOCAL_IP=$(curl -s -H "X-aws-ec2-metadata-token: $${AWSTOKEN}" http://169.254.169.254/latest/meta-data/local-ipv4)
INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $${AWSTOKEN}" http://169.254.169.254/latest/meta-data/instance-id)
INSTANCE_TYPE=$(curl -s -H "X-aws-ec2-metadata-token: $${AWSTOKEN}" http://169.254.169.254/latest/meta-data/instance-type)

## system installation
apt-get update
apt-get -qqy install ${EXTRA_PACKAGES_DEB}
pip3 install git-remote-codecommit

## install nginx
curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor > /usr/share/keyrings/nginx-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx" > /etc/apt/sources.list.d/nginx.list
echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" > /etc/apt/preferences.d/99nginx

## install varnish
#curl -s https://packagecloud.io/install/repositories/varnishcache/varnish66/script.deb.sh | bash
apt-get -qq update -o Dir::Etc::sourcelist="sources.list.d/nginx.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
apt-get -qqy install varnish nginx nginx-module-geoip

systemctl stop nginx varnish

cd /etc/varnish
git init
git remote add origin ${CODECOMMIT_SERVICES_REPO}
git fetch
git reset --hard origin/varnish
git checkout -t origin/varnish

sed -i "s/INSTANCE_LOCAL_IP/$${INSTANCE_LOCAL_IP}/" /etc/varnish/default.vcl
sed -i "s/INSTANCE_LOCAL_IP/$${INSTANCE_LOCAL_IP}/" /etc/varnish/varnish.params

uuidgen > /etc/varnish/secret

cd /etc/systemd/system/
git init
git remote add origin ${CODECOMMIT_SERVICES_REPO}
git fetch
git reset --hard origin/systemd_proxy
git checkout -t origin/systemd_proxy

cd /etc/nginx
git init
git remote add origin ${CODECOMMIT_SERVICES_REPO}
git fetch
git reset --hard origin/nginx_proxy
git checkout -t origin/nginx_proxy

sed -i "s,CIDR,${CIDR}," /etc/nginx/nginx.conf
sed -i "s/RESOLVER/${RESOLVER}/" /etc/nginx/nginx.conf
sed -i "s/INSTANCE_LOCAL_IP/$${INSTANCE_LOCAL_IP}/" /etc/nginx/nginx.conf
sed -i "s/DOMAIN/${DOMAIN} ${STAGING_DOMAIN}/" /etc/nginx/nginx.conf
sed -i "s/MAGENX_HEADER/${MAGENX_HEADER}/" /etc/nginx/nginx.conf
sed -i "s/HEALTH_CHECK_LOCATION/${BRAND}-${INSTANCE_NAME}-health-check/" /etc/nginx/nginx.conf
sed -i "s/ALB_DNS_NAME/${ALB_DNS_NAME}/" /etc/nginx/conf.d/alb.conf
sed -i "s/example.com/${DOMAIN}/" /etc/nginx/conf.d/maps.conf

systemctl daemon-reload
systemctl enable varnish
systemctl restart nginx varnish

hostnamectl set-hostname server.${DOMAIN} --static
timedatectl set-timezone ${TIMEZONE}

## install CloudWatch agent with config from SSM Parameter store
cd /usr/local/src
wget https://s3.${AWS_DEFAULT_REGION}.amazonaws.com/amazon-ssm-${AWS_DEFAULT_REGION}/latest/debian_arm64/amazon-ssm-agent.deb
dpkg -i amazon-ssm-agent.deb
systemctl enable amazon-ssm-agent

wget wget https://s3.${AWS_DEFAULT_REGION}.amazonaws.com/amazoncloudwatch-agent-${AWS_DEFAULT_REGION}/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
dpkg -i amazon-cloudwatch-agent.deb
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:amazon-cloudwatch-agent-${INSTANCE_NAME}.json

chmod 750 /usr/bin/aws
iptables -A OUTPUT -m owner ! --uid-owner root -d 169.254.169.254 -j DROP
