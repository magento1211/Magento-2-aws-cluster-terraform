#!/bin/bash
#=================================================================================#
#        MagenX e-commerce stack for Magento 2                                    #
#        Copyright (C) 2013-present admin@magenx.com                              #
#        All rights reserved.                                                     #
#=================================================================================#


###VARIABLES_PLACEHOLDER###

# Magento
MAGE_VERSION="2"
GITHUB_REPO_API_URL="https://api.github.com/repos/magenx/Magento-2-aws-cluster-terraform/contents"
INSTANCE_LOCAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

EXTRA_PACKAGES_DEB="curl jq gnupg2 auditd apt-transport-https apt-show-versions ca-certificates lsb-release unzip vim wget \
git patch ipset attr acl snmp"

apt-get -y install software-properties-common
apt-get update
apt-get -y install ${EXTRA_PACKAGES_DEB}

## install nginx
echo "deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx" > /etc/apt/sources.list.d/nginx.list
curl -fsSL https://nginx.org/keys/nginx_signing.key | apt-key add -
apt-get update
apt-get -y install nginx

## install varnish
curl -s https://packagecloud.io/install/repositories/varnishcache/varnish65/script.deb.sh | bash
apt-get update
apt-get -y install varnish
systemctl enable varnish.service

cd /etc/nginx
curl -s ${GITHUB_REPO_API_URL}/varnish 2>&1 | awk -F'"' '/download_url/ {print $4 ; system("curl -sO "$4)}'
mv default.vcl /etc/varnish/
uuidgen > /etc/varnish/secret
sed -i "s/INSTANCE_LOCAL_IP/${INSTANCE_LOCAL_IP}/" /etc/nginx/nginx.conf
sed -i "s/MAGE_DOMAIN/${MAGE_DOMAIN}/" /etc/nginx/nginx.conf
sed -i "s/INSTANCE_LOCAL_IP/${INSTANCE_LOCAL_IP}/" /etc/varnish/default.vcl
systemctl varnish restart
systemctl nginx restart

## install csf firewall
cd /usr/local/src
wget https://download.configserver.com/csf.tgz
tar -xzf csf.tgz
cd csf
bash install.sh

cat > /root/csfconfig <<END
for program in $(grep -o 'EXE:.*' /var/log/lfd.log | awk -F' ' '{print tolower($1)}' | sort -u)
do 
echo "${program}" >> /etc/csf/csf.pignore
done

### csf firewall optimization
#sed -i 's/^TESTING = "1"/TESTING = "0"/' /etc/csf/csf.conf
sed -i 's/^CT_LIMIT =.*/CT_LIMIT = "60"/' /etc/csf/csf.conf
sed -i 's/^CT_INTERVAL =.*/CT_INTERVAL = "30"/' /etc/csf/csf.conf
sed -i 's/^PORTFLOOD =.*/PORTFLOOD = 443;tcp;100;5' /etc/csf/csf.conf
sed -i 's/^PS_INTERVAL =.*/PS_INTERVAL = "120"/' /etc/csf/csf.conf
sed -i 's/^PS_LIMIT =.*/PS_LIMIT = "5"/' /etc/csf/csf.conf
sed -i 's/^PS_PERMANENT =.*/PS_PERMANENT = "1"/' /etc/csf/csf.conf
sed -i 's/^PS_BLOCK_TIME =.*/PS_BLOCK_TIME = "86400"/' /etc/csf/csf.conf
sed -i 's/^DENY_IP_LIMIT =.*/DENY_IP_LIMIT = "500000"/' /etc/csf/csf.conf
sed -i 's/^DENY_TEMP_IP_LIMIT =.*/DENY_TEMP_IP_LIMIT = "2000"/' /etc/csf/csf.conf
sed -i 's/^LF_IPSET =.*/LF_IPSET = "1"/' /etc/csf/csf.conf
### this line will block every blacklisted ip address
sed -i "/|0|/s/^#//g" /etc/csf/csf.blocklists
csf -ra
END

cd /usr/local/src
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
dpkg -i -E ./amazon-cloudwatch-agent.deb

/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:amazon-cloudwatch-agent-varnish.json
